import{u as b,S as d,c as D,U as O,V as B,W as M,e as S,C as V,X as g,Y as E,B as H,O as R,Z as z}from"./BctyZRaC.js";const j=s=>s==="defer"||s===!1;function U(...s){var v;const i=typeof s[s.length-1]=="string"?s.pop():void 0;typeof s[0]!="string"&&s.unshift(i);let[t,u,e={}]=s;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof u!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const a=b(),P=u,C=()=>d.value,w=()=>a.isHydrating?a.payload.data[t]:a.static.data[t];e.server=e.server??!0,e.default=e.default??C,e.getCachedData=e.getCachedData??w,e.lazy=e.lazy??!1,e.immediate=e.immediate??!0,e.deep=e.deep??d.deep,e.dedupe=e.dedupe??"cancel";const f=e.getCachedData(t,a),h=f!=null;if(!a._asyncData[t]||!e.immediate){(v=a.payload._errors)[t]??(v[t]=d.errorValue);const o=e.deep?D:O;a._asyncData[t]={data:o(h?f:e.default()),pending:D(!h),error:B(a.payload._errors,t),status:D("idle"),_default:e.default}}const r={...a._asyncData[t]};delete r._default,r.refresh=r.execute=(o={})=>{if(a._asyncDataPromises[t]){if(j(o.dedupe??e.dedupe))return a._asyncDataPromises[t];a._asyncDataPromises[t].cancelled=!0}if(o._initial||a.isHydrating&&o._initial!==!1){const c=o._initial?f:e.getCachedData(t,a);if(c!=null)return Promise.resolve(c)}r.pending.value=!0,r.status.value="pending";const l=new Promise((c,n)=>{try{c(P(a))}catch(y){n(y)}}).then(async c=>{if(l.cancelled)return a._asyncDataPromises[t];let n=c;e.transform&&(n=await e.transform(c)),e.pick&&(n=N(n,e.pick)),a.payload.data[t]=n,r.data.value=n,r.error.value=d.errorValue,r.status.value="success"}).catch(c=>{if(l.cancelled)return a._asyncDataPromises[t];r.error.value=E(c),r.data.value=H(e.default()),r.status.value="error"}).finally(()=>{l.cancelled||(r.pending.value=!1,delete a._asyncDataPromises[t])});return a._asyncDataPromises[t]=l,a._asyncDataPromises[t]},r.clear=()=>K(a,t);const m=()=>r.refresh({_initial:!0}),_=e.server!==!1&&a.payload.serverRendered;{const o=R();if(o&&_&&e.immediate&&!o.sp&&(o.sp=[]),o&&!o._nuxtOnBeforeMountCbs){o._nuxtOnBeforeMountCbs=[];const n=o._nuxtOnBeforeMountCbs;M(()=>{n.forEach(y=>{y()}),n.splice(0,n.length)}),S(()=>n.splice(0,n.length))}_&&a.isHydrating&&(r.error.value||f!=null)?(r.pending.value=!1,r.status.value=r.error.value?"error":"success"):o&&(a.payload.serverRendered&&a.isHydrating||e.lazy)&&e.immediate?o._nuxtOnBeforeMountCbs.push(m):e.immediate&&m();const l=z();if(e.watch){const n=V(e.watch,()=>r.refresh());l&&g(n)}const c=a.hook("app:data:refresh",async n=>{(!n||n.includes(t))&&await r.refresh()});l&&g(c)}const p=Promise.resolve(a._asyncDataPromises[t]).then(()=>r);return Object.assign(p,r),p}function K(s,i){i in s.payload.data&&(s.payload.data[i]=void 0),i in s.payload._errors&&(s.payload._errors[i]=d.errorValue),s._asyncData[i]&&(s._asyncData[i].data.value=void 0,s._asyncData[i].error.value=d.errorValue,s._asyncData[i].pending.value=!1,s._asyncData[i].status.value="idle"),i in s._asyncDataPromises&&(s._asyncDataPromises[i]&&(s._asyncDataPromises[i].cancelled=!0),s._asyncDataPromises[i]=void 0)}function N(s,i){const t={};for(const u of i)t[u]=s[u];return t}export{U as u};
